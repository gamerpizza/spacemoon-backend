// Package login uses both a http.Handler generated by the NewHandler method and a Protector working together
// to protect selectively protect certain methods from a handler by requiring the user to be logged in and use a Bearer
// Token
package login

import (
	"errors"
	"time"
)

// Persistence defines how the login/protector combo saves authorization information
type Persistence interface {
	SetUserToken(UserName, Token, time.Duration) error
	GetUser(Token) (UserName, error)
	SignUpUser(u UserName, p Password) error
	ValidateCredentials(u UserName, p Password) bool
	DeleteUser(UserName) error
	Check(UserName) (bool, error)
}

type User struct {
	UserName `json:"user_name"`
	Password `json:"password"`
}
type UserName string
type Password string

const emptyUsernameMessage = "username cannot be empty"
const emptyPasswordMessage = "password cannot be empty"
const emptyAuthMessage = "you need to provide a username and corresponding password"

var TokenNotFoundError = errors.New("token not found")
var ExpiredTokenError = errors.New("expired token")

var DefaultTokenDuration = time.Hour
